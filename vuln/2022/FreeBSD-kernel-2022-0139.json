{
    "affected": [
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "go118"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.18.3"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        },
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "go117"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.17.11"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        }
    ],
    "database_specific": {
        "discovery": "2022-06-01T00:00:00Z",
        "vid": "15888c7e-e659-11ec-b7fe-10c37b4ac2ea"
    },
    "details": "The Go project reports:\n\n> crypto/rand: rand.Read hangs with extremely large buffers\n>\n> On Windows, rand.Read will hang indefinitely if passed a\n> buffer larger than 1 << 32 - 1 bytes.\n\n> crypto/tls: session tickets lack random ticket\\_age\\_add\n>\n> Session tickets generated by crypto/tls did not contain\n> a randomly generated ticket\\_age\\_add. This allows an\n> attacker that can observe TLS handshakes to correlate\n> successive connections by comparing ticket ages during\n> session resumption.\n\n> os/exec: empty Cmd.Path can result in running unintended\n> binary on Windows\n>\n> If, on Windows, Cmd.Run, cmd.Start, cmd.Output, or\n> cmd.CombinedOutput are executed when Cmd.Path is unset\n> and, in the working directory, there are binaries named\n> either \"..com\" or \"..exe\", they will be executed.\n\n> path/filepath: Clean(`.\\c:`) returns `c:` on Windows\n>\n> On Windows, the filepath.Clean function could convert an\n> invalid path to a valid, absolute path. For example,\n> Clean(`.\\c:`) returned `c:`.",
    "id": "FreeBSD-kernel-2022-0139",
    "modified": "2022-06-07T00:00:00Z",
    "published": "2022-06-07T00:00:00Z",
    "references": [
        {
            "type": "WEB",
            "url": "https://groups.google.com/g/golang-dev/c/DidEMYAH_n0"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-30634"
        },
        {
            "type": "WEB",
            "url": "https://go.dev/issue/52561"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-30629"
        },
        {
            "type": "WEB",
            "url": "https://go.dev/issue/52814"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-30580"
        },
        {
            "type": "WEB",
            "url": "https://go.dev/issue/52574"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-29804"
        },
        {
            "type": "WEB",
            "url": "https://go.dev/issue/52476"
        }
    ],
    "schema_version": "1.7.0",
    "summary": "go -- multiple vulnerabilities"
}
