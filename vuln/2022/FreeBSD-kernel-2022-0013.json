{
    "affected": [
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "go118"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.18.9"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        },
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "go119"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.19.4"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        }
    ],
    "database_specific": {
        "discovery": "2022-10-20T00:00:00Z",
        "vid": "6f5192f5-75a7-11ed-83c0-411d43ce7fe4"
    },
    "details": "The Go project reports:\n\n> os, net/http: avoid escapes from os.DirFS and http.Dir on Windows\n>\n> The os.DirFS function and http.Dir type provide access to a\n> tree of files rooted at a given directory. These functions\n> permitted access to Windows device files under that root. For\n> example, os.DirFS(\"C:/tmp\").Open(\"COM1\") would open the COM1 device.\n> Both os.DirFS and http.Dir only provide read-only filesystem access.\n>\n> In addition, on Windows, an os.DirFS for the directory \\(the root\n> of the current drive) can permit a maliciously crafted path to escape\n> from the drive and access any path on the system.\n>\n> The behavior of os.DirFS(\"\") has changed. Previously, an empty root\n> was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would\n> open the path \"/tmp\". This now returns an error.\n\n> net/http: limit canonical header cache by bytes, not entries\n>\n> An attacker can cause excessive memory growth in a Go server\n> accepting HTTP/2 requests. HTTP/2 server connections contain a\n> cache of HTTP header keys sent by the client. While the total number\n> of entries in this cache is capped, an attacker sending very large\n> keys can cause the server to allocate approximately 64 MiB per open\n> connection.",
    "id": "FreeBSD-kernel-2022-0013",
    "modified": "2022-12-06T00:00:00Z",
    "published": "2022-12-06T00:00:00Z",
    "references": [
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-41720"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2022-41717"
        },
        {
            "type": "WEB",
            "url": "https://groups.google.com/g/golang-dev/c/G9Jj4cO4Gpk/m/kOkLVG6TAgAJ"
        }
    ],
    "schema_version": "1.7.0",
    "summary": "go -- multiple vulnerabilities"
}
