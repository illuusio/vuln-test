{
    "affected": [
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "django"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.4.3"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        },
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "django13"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.3.5"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        }
    ],
    "database_specific": {
        "discovery": "2012-12-10T00:00:00Z",
        "vid": "1b769b72-582b-11e2-b66b-00e0814cab4e"
    },
    "details": "The Django Project reports:\n\n> 1. Host header poisoning\n>\n>    Several earlier Django security releases focused on the issue of\n>    poisoning the HTTP Host header, causing Django to generate URLs\n>    pointing to arbitrary, potentially-malicious domains.\n>\n>    In response to further input received and reports of continuing\n>    issues following the previous release, we're taking additional\n>    steps to tighten Host header validation. Rather than attempt to\n>    accommodate all features HTTP supports here, Django's Host header\n>    validation attempts to support a smaller, but far more common, subset:\n>\n>    * Hostnames must consist of characters [A-Za-z0-9] plus hyphen\n>      ('-') or dot ('.').\n>    * IP addresses -- both IPv4 and IPv6 -- are permitted.\n>    * Port, if specified, is numeric.\n>\n>    Any deviation from this will now be rejected, raising the exception\n>    django.core.exceptions.SuspiciousOperation.\n> 2. Redirect poisoning\n>\n>    Also following up on a previous issue: in July of this year, we made\n>    changes to Django's HTTP redirect classes, performing additional\n>    validation of the scheme of the URL to redirect to (since, both\n>    within Django's own supplied applications and many third-party\n>    applications, accepting a user-supplied redirect target is a common\n>    pattern).\n>\n>    Since then, two independent audits of the code turned up further\n>    potential problems. So, similar to the Host-header issue, we are\n>    taking steps to provide tighter validation in response to reported\n>    problems (primarily with third-party applications, but to a certain\n>    extent also within Django itself). This comes in two parts:\n>\n>    1. A new utility function, django.utils.http.is\\_safe\\_url, is\n>       added; this function takes a URL and a hostname, and checks\n>       that the URL is either relative, or if absolute matches the\n>       supplied hostname. This function is intended for use whenever\n>       user-supplied redirect targets are accepted, to ensure that\n>       such redirects cannot lead to arbitrary third-party sites.\n>    2. All of Django's own built-in views -- primarily in the\n>       authentication system -- which allow user-supplied redirect\n>       targets now use is\\_safe\\_url to validate the supplied URL.",
    "id": "FreeBSD-kernel-2013-0189",
    "modified": "2013-01-06T00:00:00Z",
    "published": "2013-01-06T00:00:00Z",
    "references": [
        {
            "type": "WEB",
            "url": "https://www.djangoproject.com/weblog/2012/dec/10/security/"
        }
    ],
    "schema_version": "1.7.0",
    "summary": "django -- multiple vulnerabilities"
}
