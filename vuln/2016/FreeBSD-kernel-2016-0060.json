{
    "affected": [
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "drupal7"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "introduced": "7.0"
                        },
                        {
                            "fixed": "7.52"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        },
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "drupal8"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "introduced": "8.0.0"
                        },
                        {
                            "fixed": "8.2.3"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        }
    ],
    "database_specific": {
        "discovery": "2016-11-16T00:00:00Z",
        "vid": "8db24888-b2f5-11e6-8153-00248c0c745d"
    },
    "details": "The Drupal development team reports:\n\n> ### Inconsistent name for term access query (Less critical - Drupal 7 and Drupal 8)\n>\n> Drupal provides a mechanism to alter database SELECT queries before\n> they are executed. Contributed and custom modules may use this\n> mechanism to restrict access to certain entities by implementing\n> hook\\_query\\_alter() or hook\\_query\\_TAG\\_alter() in order to add\n> additional conditions. Queries can be distinguished by means of\n> query tags. As the documentation on EntityFieldQuery::addTag()\n> suggests, access-tags on entity queries normally follow the form\n> ENTITY\\_TYPE\\_access (e.g. node\\_access). However, the taxonomy\n> module's access query tag predated this system and used term\\_access\n> as the query tag instead of taxonomy\\_term\\_access.\n>\n> As a result, before this security release modules wishing to\n> restrict access to taxonomy terms may have implemented an\n> unsupported tag, or needed to look for both tags (term\\_access and\n> taxonomy\\_term\\_access) in order to be compatible with queries\n> generated both by Drupal core as well as those generated by\n> contributed modules like Entity Reference. Otherwise information\n> on taxonomy terms might have been disclosed to unprivileged users.\n>\n> ### Incorrect cache context on password reset page (Less critical - Drupal 8)\n>\n> The user password reset form does not specify a proper cache\n> context, which can lead to cache poisoning and unwanted content on\n> the page.\n>\n> ### Confirmation forms allow external URLs to be injected (Moderately critical - Drupal 7)\n>\n> Under certain circumstances, malicious users could construct a URL\n> to a confirmation form that would trick users into being redirected\n> to a 3rd party website after interacting with the form, thereby\n> exposing the users to potential social engineering attacks.\n>\n> ### Denial of service via transliterate mechanism (Moderately critical - Drupal 8)\n>\n> A specially crafted URL can cause a denial of service via the\n> transliterate mechanism.",
    "id": "FreeBSD-kernel-2016-0060",
    "modified": "2016-11-27T00:00:00Z",
    "published": "2016-11-25T00:00:00Z",
    "references": [
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2016-9449"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2016-9450"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2016-9451"
        },
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2016-9452"
        }
    ],
    "schema_version": "1.7.0",
    "summary": "Drupal Code -- Multiple Vulnerabilities"
}
