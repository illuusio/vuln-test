{
    "affected": [
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "django"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.4.2"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        },
        {
            "package": {
                "ecosystem": "FreeBSD:ports",
                "name": "django13"
            },
            "ranges": [
                {
                    "events": [
                        {
                            "fixed": "1.3.4"
                        },
                        {
                            "introduced": "0"
                        }
                    ],
                    "type": "ECOSYSTEM"
                }
            ]
        }
    ],
    "database_specific": {
        "discovery": "2012-10-17T00:00:00Z",
        "vid": "5f326d75-1db9-11e2-bc8f-d0df9acfd7e5"
    },
    "details": "The Django Project reports:\n\n> 1. Host header poisoning\n>\n>    Some parts of Django -- independent of end-user-written applications\n>    -- make use of full URLs, including domain name, which are generated\n>    from the HTTP Host header. Some attacks against this are beyond Django's\n>    ability to control, and require the web server to be properly configured;\n>    Django's documentation has for some time contained notes advising users\n>    on such configuration.\n>\n>    Django's own built-in parsing of the Host header is, however, still\n>    vulnerable, as was reported to us recently. The Host header parsing\n>    in Django 1.3 and Django 1.4 -- specifically, django.http.HttpRequest.get\\_host()\n>    -- was incorrectly handling username/password information in the header.\n>    Thus, for example, the following Host header would be accepted by Django when\n>    running on \"validsite.com\":\n>\n>    Host: validsite.com:random@evilsite.com\n>\n>    Using this, an attacker can cause parts of Django -- particularly the\n>    password-reset mechanism -- to generate and display arbitrary URLs to users.\n>\n>    To remedy this, the parsing in HttpRequest.get\\_host() is being modified; Host\n>    headers which contain potentially dangerous content (such as username/password\n>    pairs) now raise the exception django.core.exceptions.SuspiciousOperation.\n> 2. Documentation of HttpOnly cookie option\n>\n>    As of Django 1.4, session cookies are always sent with the HttpOnly flag, which\n>    provides some additional protection from cross-site scripting attacks by denying\n>    client-side scripts access to the session cookie.\n>\n>    Though not directly a security issue in Django, it has been reported that the\n>    Django 1.4 documentation incorrectly described this change, by claiming that this\n>    was now the default for all cookies set by the HttpResponse.set\\_cookie() method.\n>\n>    The Django documentation has been updated to reflect that this only applies to the\n>    session cookie. Users of Django are encouraged to review their use of set\\_cookie()\n>    to ensure that the HttpOnly flag is being set or unset appropriately.",
    "id": "FreeBSD-kernel-2012-0039",
    "modified": "2012-10-24T00:00:00Z",
    "published": "2012-10-24T00:00:00Z",
    "references": [
        {
            "type": "ADVISORY",
            "url": "https://api.osv.dev/v1/vulns/CVE-2012-4520"
        },
        {
            "type": "WEB",
            "url": "https://www.djangoproject.com/weblog/2012/oct/17/security/"
        }
    ],
    "schema_version": "1.7.0",
    "summary": "django -- multiple vulnerabilities"
}
